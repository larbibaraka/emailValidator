{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","email","setEmail","valid","setValid","click","setClick","handleClick","e","a","url","fetch","response","json","isValid","console","log","className","id","name","type","value","onChange","target","placeholder","role","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPA+CeA,MA5Cf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEaF,oBAAS,GAFtB,mBAENG,EAFM,KAECC,EAFD,OAGaJ,oBAAS,GAHtB,mBAGNK,EAHM,KAGCC,EAHD,KAKPC,EAAW,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,6DACZC,EADY,qFACwET,GADxE,SAEMU,MAAMD,EAAK,CAClC,QAAW,CACR,kBAAmB,wCACnB,iBAAkB,wDALJ,cAEZE,EAFY,gBAQMA,EAASC,OARf,gBAQXC,EARW,EAQXA,QACPC,QAAQC,IAAI,eAAgBF,GAEvBA,GACDV,EAASU,GAEbR,GAAS,GAdS,4CAAH,sDAsBjB,OACE,yBAAKW,UAAU,aACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,IACb,2BAAOC,GAAG,cAAcD,UAAU,WAAWE,KAAK,QAAQC,KAAK,QAAQC,MAAOpB,EAAOqB,SAV7E,SAACd,GACnBJ,GAAS,GACTE,GAAS,GACTJ,EAASM,EAAEe,OAAOF,QAOqGG,YAAY,WAE3H,6BACE,4BAAQP,UAAU,6CAA6CQ,KAAK,SAASC,QAASnB,GAAtF,UAEAF,EAAaF,EAAQ,wBAAIc,UAAU,oBAAd,WAA0ChB,EAA1C,OAAqDE,EAAQ,QAAU,aAAqB,wBAAIc,UAAU,kBAAd,WAAwChB,EAAxC,OAAmDE,EAAQ,QAAU,aAA9K,OC5BFwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a7da21ce.chunk.js","sourcesContent":["import React , {useState} from 'react';\nimport './App.css';\n\nfunction App() {\n  const [email, setEmail] = useState('');\n  const [valid, setValid] = useState(false);\n  const [click, setClick] = useState(false);\n\n  const handleClick = async(e) =>{\n    const url = `https://pozzad-email-validator.p.rapidapi.com/emailvalidator/validateEmail/${email}`;\n    const response  = await fetch(url, {\n    \t\"headers\": {\n        \"x-rapidapi-host\": \"pozzad-email-validator.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"9c4837d252msh2a0cd163ca7c47bp1702dejsnf7e2cbcc8a04\"\n      }\n    });\n    const {isValid} = await response.json();\n    console.log('is valid :  ', isValid)\n\n      if(isValid){\n        setValid(isValid);\n    } \n    setClick(true);\n      \n  }\n  const handleInput = (e) =>{\n    setValid(false);\n    setClick(false);\n    setEmail(e.target.value);\n  }\n  return (\n    <div className=\"container\">\n      <div className=\"wrapper\">\n        <div className=\"wrapper-inside\">\n            <div className=\"\">\n              <input id=\"icon_prefix\" className=\"validate\" name=\"email\" type=\"email\" value={email} onChange={handleInput}  placeholder=\"email\"/>\n            </div>\n            <div>\n              <button className=\"waves-effect waves-light btn teal accent-3\" role=\"button\" onClick={handleClick}>check</button>\n            </div>\n           { !click ? \"\" : valid ? <h3 className=\" green accent-4 \">Email : {email} is {valid ? \"valid\" : \"not valid\"}</h3> :  <h3 className=\" red accent-4 \">Email : {email} is {valid ? \"valid\" : \"not valid\"}</h3>}\n        </div>\n    </div>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}